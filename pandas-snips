=============================================================================
Sum two columns in a dataset then print the index value of the second highest
=============================================================================

import pandas as pd

df = pd.read_csv('olympics.csv', index_col=0, skiprows=1)
count=0

series1=pd.Series((df['Total'] + df['Total.1']).sort_values(ascending=False))
for index, val in series1.iteritems():
    count=count+1
    if count==2:
        print (index)

=============================================================================
UMICH assignment 2
=============================================================================
import pandas as pd

df = pd.read_csv('olympics.csv', index_col=0, skiprows=1)

for col in df.columns:
    if col[:2]=='01':
        df.rename(columns={col:'Gold'+col[4:]}, inplace=True)
    if col[:2]=='02':
        df.rename(columns={col:'Silver'+col[4:]}, inplace=True)
    if col[:2]=='03':
        df.rename(columns={col:'Bronze'+col[4:]}, inplace=True)
    if col[:1]=='â„–':
        df.rename(columns={col:'#'+col[1:]}, inplace=True)

names_ids = df.index.str.split('\s\(') # split the index by '('

df.index = names_ids.str[0] # the [0] element is the country name (new index) 
df['ID'] = names_ids.str[1].str[:3] # the [1] element is the abbreviation or ID (take first 3 characters from that)

df = df.drop('Totals')
----------------------------------------------------------------
#Which country has won the most gold medals in summer games?
#This function should return a single string value.

def answer_one():   
    return df['Gold'].sort_values(ascending=False).idxmax() #Note: argmax() is deprecated
#Or to return the number of Golds
    return df['Gold'].sort_values(ascending=False).max()
----------------------------------------------------------------
#Which country had the biggest difference between their summer and winter gold medal counts?
#This function should return a single string value.

def answer_two():
    df['diff']=df['Gold']-df['Gold.1']
    return df['diff'].sort_values(ascending=False).idxmax()
----------------------------------------------------------------
#Which country has the biggest difference between their summer gold medal counts and winter gold medal counts relative 
#to their total gold medal count?

#Only include countries that have won at least 1 gold in both summer and winter.
#This function should return a single string value.

def answer_three():
    eligible = df[(df['Gold'] != 0) & (df['Gold.1'] != 0)]
    eligible['diff']=eligible['Gold']-eligible['Gold.1']
    eligible['relative']=eligible['diff']/eligible['Combined total']
    return eligible['relative'].sort_values(ascending=False).idxmax()
----------------------------------------------------------------
#Question 4
#Write a function that creates a Series called "Points" which is a weighted value where each gold medal 
#(`Gold.2`) counts for 3 points, silver medals (`Silver.2`) for 2 points, and bronze medals (`Bronze.2`) 
#for 1 point. The function should return only the column (a Series object) which you created.

#*This function should return a Series named `Points` of length 146*

def answer_four():
    Goldweights=df['Gold.2']*3
    Silverweights=df['Silver.2']*2
    Bronzeweights=df['Bronze.2']*1
    Points=Goldweights+Silverweights+Bronzeweights
    return Points
----------------------------------------------------------------
#Interim assignment
purchase_1 = pd.Series({'Name': 'Chris',
                        'Item Purchased': 'Dog Food',
                        'Cost': 22.50})
purchase_2 = pd.Series({'Name': 'Kevyn',
                        'Item Purchased': 'Kitty Litter',
                        'Cost': 2.50})
purchase_3 = pd.Series({'Name': 'Vinod',
                        'Item Purchased': 'Bird Seed',
                        'Cost': 5.00})

df = pd.DataFrame([purchase_1, purchase_2, purchase_3], index=['Store 1', 'Store 1', 'Store 2'])
#Verbose Solution
dfspenders=df.where(df['Cost'] > 3)
#dfspenders=dfspenders.dropna()
print(dfspenders['Name'])
#Terse Solution
df['Name'][df['Cost']>3]
---------------------------------------------------------------
#Interim Assignment
purchase_1 = pd.Series({'Name': 'Chris',
                        'Item Purchased': 'Dog Food',
                        'Cost': 22.50})
purchase_2 = pd.Series({'Name': 'Kevyn',
                        'Item Purchased': 'Kitty Litter',
                        'Cost': 2.50})
purchase_3 = pd.Series({'Name': 'Vinod',
                        'Item Purchased': 'Bird Seed',
                        'Cost': 5.00})

df = pd.DataFrame([purchase_1, purchase_2, purchase_3], index=['Store 1', 'Store 1', 'Store 2'])

df = df.set_index([df.index, 'Name'])#Set the indexing
df.index.names = ['Location', 'Name']#Set the labels
df = df.append(pd.Series(data={'Cost': 3.00, 'Item Purchased': 'Kitty Food'}, name=('Store 2', 'Kevyn')))#Adds an element
--------------------------------------------------------------
#Question 5
def answer_five():
    census_df = pd.read_csv('census.csv')
    census_df = census_df.set_index(['STNAME', 'CTYNAME'])
    census_df = census_df.groupby(level=0).count()
    return census_df['SUMLEV'].sort_values(ascending=False).idxmax()

===========
  OR
===========

import pandas as pd

census_df = pd.read_csv('cs.csv')
df_filtered=census_df[census_df['SUMLEV'] == 50]
state_df = pd.DataFrame()
state_df['State']=df_filtered['STNAME'].unique()

state_df['CountyCnt'] = 0
state_df.set_index('State',inplace=True)
for st in state_df.index:

    stcount=df_filtered[df_filtered['STNAME'] == st].index.size
    state_df['CountyCnt'].loc[st] = stcount

#print(df_filtered[df_filtered['STNAME'] == st])
print(state_df['CountyCnt'].sort_values (ascending=False).idxmax())

===================================================================
